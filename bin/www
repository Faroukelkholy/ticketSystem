#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('iotblue:server');
var http = require('http');
const settings = require('../settings');
const MongoDriver = require('../storage/mongoDriver');
const mongoDriver = new MongoDriver(settings.mongo);
const MqClient = require("../utils/mqClient");
const mqClient = new MqClient();
const ticketQueue = '/ticket_id';
const socketQueue = '/socket_id';




/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);
var io = require('socket.io')(server);

mongoDriver.onConnection().then(() => {
  mongoDriver.handleError();

  mqClient.connect(settings.rabbitmq).then(() => {
    
    io.on('connection', async function(socket){
      // mqClient.publishMsg(socketQueue,socket.id);
      console.log('www socket connection socket.id',socket.id);
      const msg = await mqClient.consumeMsq(ticketQueue);
      console.log('www msg consumed in io.on:',msg);
      const ticket =  await mongoDriver.ticket.getTicket(msg);
      console.log('wwww ticket queried :',ticket[0]);
        io.to(socket.id).emit('ticket', ticket[0]);
    });

  }).catch((error)=>{
      console.error('mqClient.connect error:', error);
  });

});



/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
